---
title: "Psych 790 DSHB Final Project"
author: "Huda Ahmed, Kenneth Diao, Sadaf Nasir"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

# Setting Up Our Environment

```{r}
# Handle conflicts
options(conflicts.policy = "depends.ok")
devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/fun_ml.R?raw=true")
tidymodels_conflictRules()
conflictRules("Matrix", mask.ok = c("expand", "pack", "unpack"))

# Set global options
knitr::opts_chunk$set(echo = TRUE)

# Load packages
library(tidyverse)
library(tidymodels)
library(readr)
library(cowplot, include.only = "plot_grid")
library(mice)

# Source functions
devtools::source_url(
  "https://github.com/jjcurtin/lab_support/blob/main/fun_eda.R?raw=true")
devtools::source_url(
  "https://github.com/jjcurtin/lab_support/blob/main/var_score.R?raw=true")
devtools::source_url(
  "https://github.com/jjcurtin/lab_support/blob/main/fun_plots.R?raw=true")

# Set theme
theme_set(theme_classic()) 

# Path for data
path_data <- "data"
```

# Codebook

## Chronic Health Conditions Variables

`CVDINFR4`, heart_attack: (Ever told) you had a heart attack, also called a myocardial infarction? (1 = yes, 2 = no, 7 = don't know/not sure, 9 = refused)

`CVDCRHD4`, coronary_heart_disease: (Ever told) (you had) angina or coronary heart disease? (1 = yes, 2 = no, 7 = don't know/not sure, 9 = refused)

`CVDSTRK3`, stroke: (Ever told) (you had) a stroke. (1 = yes, 2 = no, 7 = don't know/not sure, 9 = refused)

`ASTHMA3`, asthma: (Ever told) (you had) asthma? (1 = yes, 2 = no, 7 = don't know/not sure, 9 = refused)

-   `ASTHNOW`, asthma_still: Do you still have asthma? (1 = yes, 2 = no, 7 = don't know/not sure, 9 = refused)

`CHCSCNC1`, skin_cancer: (Ever told) (you had) skin cancer that is not melanoma? (1 = yes, 2 = no, 7 = don't know/not sure, 9 = refused)

`CHCOCNC1`, melanoma_or_other_cancer: (Ever told) (you had) melanoma or any other types of cancer? (1 = yes, 2 = no, 7 = don't know/not sure, 9 = refused)

`CHCCOPD3`, copd: (Ever told) (you had) C.O.P.D. (chronic obstructive pulmonary disease), emphysema or chronic bronchitis? (1 = yes, 2 = no, 7 = don't know/not sure, 9 = refused)

`ADDEPEV3`, depression: (Ever told) (you had) a depressive disorder (including depression, major depression, dysthymia, or minor depression)? (1 = yes, 2 = no, 7 = don't know/not sure, 9 = refused)

`CHCKDNY2`, kidney_disease: Not including kidney stones, bladder infection or incontinence, were you ever told you had kidney disease? (1 = yes, 2 = no, 7 = don't know/not sure, 9 = refused)

`HAVARTH4`, arthritis: (Ever told) (you had) some form of arthritis, rheumatoid arthritis, gout, lupus, or fibromyalgia? (Arthritis diagnoses include: rheumatism, polymyalgia rheumatica; osteoarthritis (not osteporosis); tendonitis, bursitis, bunion, tennis elbow; carpal tunnel syndrome, tarsal tunnel syndrome; joint infection, etc.) (1 = yes, 2 = no, 7 = don't know/not sure, 9 = refused)

`DIABETE4`, diabetes: (Ever told) (you had) diabetes? (If ´Yes´ and respondent is female, ask ´Was this only when you were pregnant?´. If Respondent says pre-diabetes or borderline diabetes, use response code 4.) (1 = yes, 2 = yes, but female told only during pregnancy, 3 = no, 4 = no, pre-diabetes or borderline diabetes, 7 = don't know/not sure, 9 = refused)

## Demographic Variables

`MARITAL`, marital_status: Are you: (marital status) (1 = married, 2 = divorced, 3 = widowed, 4 = separated, 5 = never married, 6 = a member of an unmarried couple, 9 = refused)

`EDUCA`, education: What is the highest grade or year of school you completed? (1 = Never attended school or only kindergarten, 2 = Grades 1 through 8 (Elementary), 3 = Grades 9 through 11 (Some high school), 4 = Grade 12 or GED (High school graduate), 5 = College 1 year to 3 years (Some college or technical school), 6 = College 4 years or more (College graduate), 9 = refused)

`RENTHOM1`, home_ownership: Do you own or rent your home? (1 = own, 2 = rent, 3 = other arrangement, 7 = don't know/not sure, 9 = refused)

`NUMHHOL4`, landlines: Not including cell phones or numbers used for computers, fax machines or security systems, do you have more than one landline telephone number in your household? (1 = yes, 2 = no, 7 = don't know/not sure, 9 = refused)

`VETERAN3`, veteran_status: Have you ever served on active duty in the United States Armed Forces, either in the regular military or in a National Guard or military reserve unit? (1 = yes, 2 = no, 7 = don't know/not sure, 9 = refused)

`EMPLOY1`, employment_status: Are you currently…? (1 = employed for wages, 2 = self-employed, 3 = out of work for 1 year or more, 4 = out of work for less than 1 year, 5 = a homemaker, 6 = a student, 7 = retired, 8 = unable to work, 9 = refused)

`INCOME3`, household_income: Is your annual household income from all sources: (1 = Less than 10,000 dollars, 2 = Less than 15,000 dollars (10,000 dollars to \< 15,000 dollars), 3 = Less than 20,000 dollars (15,000 dollars to \< 20,000 dollars), 4 = Less than 25,000 dollars (20,000 dollars to \< 25,000 dollars), 5 = Less than 35,000 dollars (25,000 dollars to \< 35,000 dollars), 6 = Less than 50,000 dollars (35,000 dollars to \< 50,000 dollars), 7 = Less than 75,000 dollars (50,000 dollars to \< 75,000 dollars), 8 = Less than 100,000 dollars? (75,000 dollars to \< 100,000 dollars), 9 = Less than 150,000 dollars? (100,000 dollars to \< 150,000 dollars)?, 10 = Less than 200,000 dollars? (150,000 dollars to \< 200,000 dollars), 11 = 200,000 dollars or more, 77 = don't know/not sure, 99 = refused)

`PREGNANT`, pregnant: To your knowledge, are you now pregnant? (1 = yes, 2 = no, 7 = don't know/not sure, 9 = refused)

`DEAF`, deaf: Are you deaf or do you have serious difficulty hearing? (1 = yes, 2 = no, 7 = don't know/not sure, 9 = refused)

## COVID-19 Variables

`COVIDPRM`, primary_covid_symptom: Which of the following was the primary symptom that you experienced? Was it... (1 = tiredness or fatigue, 2 = Difficulty thinking or concentrating or forgetfulness/memory problems (sometimes referred to as ´brain fog´), 3 = Difficulty breathing or shortness of breath, 4 = Joint or muscle pain, 5 = Fast-beating or pounding heart (also known as heart palpitations) or chest pain, 6 = Dizziness on standing, 7 = Depression, anxiety, or mood changes, 8 = Symptoms that get worse after physical or mental activities, 9 = You did not have any long-term symptoms that limited your activities, 10 = Loss of taste or smell, 11 = Some other symptom, 77 = don't know/not sure, 99 = refused)

## COVID-19 Immunization Variables

`COVIDVA1`, covid_vacc_status: Have you received at least one dose of a COVID-19 vaccination? (1 = yes, 2 = no, 7 = don't know/not sure, 9 = refused)

`COVACGET`, covid_vacc_willingness: Would you say you would definitely get a vaccine, probably get a vaccine, probably not get a vaccine, definitely not get a vaccine, or are not sure? (1 = Will definitely get a vaccine, 2 = Will probably get a vaccine, 3 = Will probably not get a vaccine, 4 = Will definitely not get a vaccine, 7 = don't know/not sure, 9 = refused)

`COVIDNU1`, covid_vacc_count: How many COVID-19 vaccinations have you received? (1 = one, 2 = two, 3 = three, 4 = four or more, 7 = don't know/not sure, 9 = refused)

`COVIDINT`, covid_vacc_intent: Would you say you have already received all recommended doses, plan to receive all recommended doses or do not plan to receive all recommended doses? (1 = Already received all recommended doses, 2 = Plan to receive all recommended doses, 3 = Do not plan to receive all recommended doses, 7 = don't know/not sure, 9 = refused)

## Outcome variable

`COVIDSMP`, prolonged_covid_symptoms: Did you have any symptoms lasting 3 months or longer that you did not have prior to having coronavirus or COVID-19? (1 = yes, 2 = no, 7 = don't know/not sure, 9 = refused)

# Data Preparation

`covacget` and `covacint` are missing from dataset

**Not including the following variables**

-   `COVIDFS1` During what month and year did you receive your (first) COVID-19 vaccination? (too much to code)
-   `COVIDSE1` During what month and year did you receive your second COVID-19 vaccination? (too much to code)

`WEIGHT2`, weight: About how much do you weigh without shoes? (If respondent answers in metrics, put a 9 in the first column)\[Round fractions up.\] (50 - 0776 = weight in pounds, 7777 = don't know/not sure, 9023 - 9352 = weight in kilograms, 9999 = refused)

`HEIGHT3`, height: About how tall are you without shoes? (If respondent answers in metrics, put a 9 in the first column)\[Round fractions down.\] (200 - 711 = ft/inches, 7777 = don't know, not sure, 9061 - 9998 = meters/centimeters, 9999 = refused)

`CHILDREN`, children: How many children less than 18 years of age live in your household? (0, 1 - 87, 88 = none, 99 = refused)

`COVIDPOS`, covid_positive: Has a doctor, nurse, or other health professional ever told you that you tested positive for COVID 19? (1 = yes, 2 = no, 3 = tested positive using home test without health professional, 7 = don't know/not sure, 9 = refused) (all remaining individuals are covid positive)

asthma_still = asthnow, landlines = numhhol4, weight = weight2, height = height3,

```{r}
# Read in data, "tidy" variable names as snake-case
data_train <- read_csv(here::here(path_data, "data_train.csv")) |>
  janitor::clean_names("snake")
data_test <- read_csv(here::here(path_data, "data_test.csv")) |>
  janitor::clean_names("snake")

data_train <- data_train |>
  rename(arthritis = arthiritis)
data_test <- data_test |>
  rename(arthritis = arthiritis)

data_train <- data_train |>
  filter(!is.na(prolonged_covid_symptoms))
data_test <- data_test |>
  filter(!is.na(prolonged_covid_symptoms))

data_train <- data_train |>
  mutate(across(where(is.numeric), factor))
data_test <- data_test |>
  mutate(across(where(is.numeric), factor))

skimr::skim(data_train)

data_train <- data_train |>
  select(-c(covid_pos, children))
data_test <- data_test |>
  select(-c(covid_pos, children))
```

Note that we decided to remove `covid_pos` and `children`. We removed `covid_pos` because all responses were "yes" and we removed `children` because it did not seem theoretically important but added a lot of dummy variables to our analyses.

```{r}
data_train |> skimr::skim()
```

# Logistic Regression

## Full Model without imputation

```{r}
rec_no_impute <-
  recipe(data = data_train,
         prolonged_covid_symptoms ~ .) |>
  step_dummy(all_nominal_predictors())
```

```{r}
rec_prep_no_impute <- rec_no_impute |>
  prep(data_train)
beepr::beep()

feat_train_no_impute <- rec_prep_no_impute |>
  bake(NULL)
beepr::beep()

feat_test_no_impute <- rec_prep_no_impute |>
  bake(data_test)
beepr::beep()
```

```{r}
lm_no_impute <- logistic_reg() |>
  set_engine("glm") |>
  fit(prolonged_covid_symptoms ~ ., data = feat_train_no_impute)
beepr::beep()
```

```{r}
accuracy_vec(truth = feat_test_no_impute$prolonged_covid_symptoms,
             estimate = predict(lm_no_impute, feat_test_no_impute)$.pred_class)
```

```{r}
accuracy_table <- tibble(model = character(),
                         accuracy_val = numeric())

accuracy_table <- bind_rows(accuracy_table,
                       tibble(model = "full_no_impute",
                              accuracy_val = accuracy_vec(
                                truth = feat_test_no_impute$prolonged_covid_symptoms,
                                estimate = predict(lm_no_impute, feat_test_no_impute)$.pred_class)))
```

## Full Model with mode imputation

```{r}
rec_mode <-
  recipe(data = data_train,
         prolonged_covid_symptoms ~ .) |>
  step_impute_mode(all_predictors()) |>
  step_dummy(all_nominal_predictors())
```

```{r}
rec_prep_mode <- rec_mode |>
  prep(data_train)
beepr::beep()

feat_train_mode <- rec_prep_mode |>
  bake(NULL)
beepr::beep()

feat_test_mode <- rec_prep_mode |>
  bake(data_test)
beepr::beep()
```

```{r}
lm_mode <- logistic_reg() |>
  set_engine("glm") |>
  fit(prolonged_covid_symptoms ~ ., data = feat_train_mode)
beepr::beep()
```

```{r}
accuracy_vec(truth = feat_test_mode$prolonged_covid_symptoms,
             estimate = predict(lm_mode, feat_test_mode)$.pred_class)
```

```{r}
accuracy_table <- bind_rows(accuracy_table,
                       tibble(model = "full_impute_mode",
                              accuracy_val = accuracy_vec(
                                truth = feat_test_mode$prolonged_covid_symptoms,
                                estimate = predict(lm_mode, feat_test_mode)$.pred_class)))
```

## Full Model with bagged imputation

```{r}
rec_bag <-
  recipe(data = data_train,
         prolonged_covid_symptoms ~ .) |>
  step_impute_bag(all_predictors()) |>
  step_dummy(all_nominal_predictors())
```

```{r}
rec_prep_bag <- rec_bag |>
  prep(data_train)
beepr::beep()

feat_train_bag <- rec_prep_bag |>
  bake(NULL)
beepr::beep()

feat_test_bag <- rec_prep_bag |>
  bake(data_test)
beepr::beep()
```

```{r}
lm_bag <- logistic_reg() |>
  set_engine("glm") |>
  fit(prolonged_covid_symptoms ~ ., data = feat_train_bag)
beepr::beep()
```

```{r}
accuracy_vec(truth = feat_test_bag$prolonged_covid_symptoms,
             estimate = predict(lm_bag, feat_test_bag)$.pred_class)
```

```{r}
accuracy_table <- bind_rows(accuracy_table,
                       tibble(model = "full_impute_bag",
                              accuracy_val = accuracy_vec(
                                truth = feat_test_bag$prolonged_covid_symptoms,
                                estimate = predict(lm_bag, feat_test_bag)$.pred_class)))
```

## Full Model with KNN imputation

```{r}
rec_knn <-
  recipe(data = data_train,
         prolonged_covid_symptoms ~ .) |>
  step_impute_knn(all_predictors()) |>
  step_dummy(all_nominal_predictors())
```

```{r}
rec_prep_knn <- rec_knn |>
  prep(data_train)
beepr::beep()

feat_train_knn <- rec_prep_knn |>
  bake(NULL)
beepr::beep()

feat_test_knn <- rec_prep_knn |>
  bake(data_test)
beepr::beep()
```

```{r}
lm_knn <- logistic_reg() |>
  set_engine("glm") |>
  fit(prolonged_covid_symptoms ~ ., data = feat_train_knn)
beepr::beep()
```

```{r}
accuracy_vec(truth = feat_test_knn$prolonged_covid_symptoms,
             estimate = predict(lm_knn, feat_test_knn)$.pred_class)
```

```{r}
accuracy_table <- bind_rows(accuracy_table,
                       tibble(model = "full_impute_knn",
                              accuracy_val = accuracy_vec(
                                truth = feat_test_knn$prolonged_covid_symptoms,
                                estimate = predict(lm_knn, feat_test_knn)$.pred_class)))
```

Impute mode both performed the best and was not prohibitively time-consuming to run; therefore, all subsequent models will use mode imputation for missing data.

## Drop `heart_attack`

```{r}
rec_heart_attack <-
  recipe(data = data_train,
         prolonged_covid_symptoms ~ .) |>
  step_rm(heart_attack) |>
  step_impute_mode(all_predictors()) |>
  step_dummy(all_nominal_predictors())
```

```{r}
rec_prep_heart_attack <- rec_heart_attack |>
  prep(data_train)
beepr::beep()

feat_train_heart_attack <- rec_prep_heart_attack |>
  bake(NULL)
beepr::beep()

feat_test_heart_attack <- rec_prep_heart_attack |>
  bake(data_test)
beepr::beep()
```

```{r}
lm_drop_heart_attack <- logistic_reg() |>
  set_engine("glm") |>
  fit(prolonged_covid_symptoms ~ ., data = feat_train_heart_attack)
beepr::beep()
```

```{r}
accuracy_vec(truth = feat_test_heart_attack$prolonged_covid_symptoms,
             estimate = predict(lm_drop_heart_attack, feat_test_heart_attack)$.pred_class)
```

```{r}
accuracy_table <- bind_rows(accuracy_table,
                       tibble(model = "drop_heart_attack",
                              accuracy_val = accuracy_vec(
                                truth = feat_test_heart_attack$prolonged_covid_symptoms,
                                estimate = predict(lm_drop_heart_attack, feat_test_heart_attack)$.pred_class)))
```

## Drop `coronary_heart_disease`

```{r}
rec_coronary_heart_disease <-
  recipe(data = data_train,
         prolonged_covid_symptoms ~ .) |>
  step_rm(coronary_heart_disease) |>
  step_impute_mode(all_predictors()) |>
  step_dummy(all_nominal_predictors())
```

```{r}
rec_prep_coronary_heart_disease <- rec_coronary_heart_disease |>
  prep(data_train)
beepr::beep()

feat_train_coronary_heart_disease <- rec_prep_coronary_heart_disease |>
  bake(NULL)
beepr::beep()

feat_test_coronary_heart_disease <- rec_prep_coronary_heart_disease |>
  bake(data_test)
beepr::beep()
```

```{r}
lm_drop_coronary_heart_disease <- logistic_reg() |>
  set_engine("glm") |>
  fit(prolonged_covid_symptoms ~ ., data = feat_train_coronary_heart_disease)
beepr::beep()
```

```{r}
accuracy_vec(truth = feat_test_coronary_heart_disease$prolonged_covid_symptoms,
             estimate = predict(lm_drop_coronary_heart_disease, feat_test_coronary_heart_disease)$.pred_class)
```

```{r}
accuracy_table <- bind_rows(accuracy_table,
                       tibble(model = "drop_coronary_heart_disease",
                              accuracy_val = accuracy_vec(
                                truth = feat_test_coronary_heart_disease$prolonged_covid_symptoms,
                                estimate = predict(lm_drop_coronary_heart_disease, feat_test_coronary_heart_disease)$.pred_class)))
```

## Drop `stroke`

```{r}
rec_stroke <-
  recipe(data = data_train,
         prolonged_covid_symptoms ~ .) |>
  step_rm(stroke) |>
  step_impute_mode(all_predictors()) |>
  step_dummy(all_nominal_predictors())
```

```{r}
rec_prep_stroke <- rec_stroke |>
  prep(data_train)
beepr::beep()

feat_train_stroke <- rec_prep_stroke |>
  bake(NULL)
beepr::beep()

feat_test_stroke <- rec_prep_stroke |>
  bake(data_test)
beepr::beep()
```

```{r}
lm_drop_stroke <- logistic_reg() |>
  set_engine("glm") |>
  fit(prolonged_covid_symptoms ~ ., data = feat_train_stroke)
beepr::beep()
```

```{r}
accuracy_vec(truth = feat_test_stroke$prolonged_covid_symptoms,
             estimate = predict(lm_drop_stroke, feat_test_stroke)$.pred_class)
```

```{r}
accuracy_table <- bind_rows(accuracy_table,
                       tibble(model = "drop_stroke",
                              accuracy_val = accuracy_vec(
                                truth = feat_test_stroke$prolonged_covid_symptoms,
                                estimate = predict(lm_drop_stroke, feat_test_stroke)$.pred_class)))
```

## Drop `asthma`

```{r}
rec_asthma <-
  recipe(data = data_train,
         prolonged_covid_symptoms ~ .) |>
  step_rm(asthma) |>
  step_impute_mode(all_predictors()) |>
  step_dummy(all_nominal_predictors())
```

```{r}
rec_prep_asthma <- rec_asthma |>
  prep(data_train)
beepr::beep()

feat_train_asthma <- rec_prep_asthma |>
  bake(NULL)
beepr::beep()

feat_test_asthma <- rec_prep_asthma |>
  bake(data_test)
beepr::beep()
```

```{r}
lm_drop_asthma <- logistic_reg() |>
  set_engine("glm") |>
  fit(prolonged_covid_symptoms ~ ., data = feat_train_asthma)
beepr::beep()
```

```{r}
accuracy_vec(truth = feat_test_asthma$prolonged_covid_symptoms,
             estimate = predict(lm_drop_asthma, feat_test_asthma)$.pred_class)
```

```{r}
accuracy_table <- bind_rows(accuracy_table,
                       tibble(model = "drop_asthma",
                              accuracy_val = accuracy_vec(
                                truth = feat_test_asthma$prolonged_covid_symptoms,
                                estimate = predict(lm_drop_asthma, feat_test_asthma)$.pred_class)))
```

## Drop `skin_cancer`

```{r}
rec_skin_cancer <-
  recipe(data = data_train,
         prolonged_covid_symptoms ~ .) |>
  step_rm(skin_cancer) |>
  step_impute_mode(all_predictors()) |>
  step_dummy(all_nominal_predictors())
```

```{r}
rec_prep_skin_cancer <- rec_skin_cancer |>
  prep(data_train)
beepr::beep()

feat_train_skin_cancer <- rec_prep_skin_cancer |>
  bake(NULL)
beepr::beep()

feat_test_skin_cancer <- rec_prep_skin_cancer |>
  bake(data_test)
beepr::beep()
```

```{r}
lm_drop_skin_cancer <- logistic_reg() |>
  set_engine("glm") |>
  fit(prolonged_covid_symptoms ~ ., data = feat_train_skin_cancer)
beepr::beep()
```

```{r}
accuracy_vec(truth = feat_test_skin_cancer$prolonged_covid_symptoms,
             estimate = predict(lm_drop_skin_cancer, feat_test_skin_cancer)$.pred_class)
```

```{r}
accuracy_table <- bind_rows(accuracy_table,
                       tibble(model = "drop_skin_cancer",
                              accuracy_val = accuracy_vec(
                                truth = feat_test_skin_cancer$prolonged_covid_symptoms,
                                estimate = predict(lm_drop_skin_cancer, feat_test_skin_cancer)$.pred_class)))
```

## Drop `melanoma_or_other`

```{r}
rec_melanoma <-
  recipe(data = data_train,
         prolonged_covid_symptoms ~ .) |>
  step_rm(melanoma_or_other) |>
  step_impute_mode(all_predictors()) |>
  step_dummy(all_nominal_predictors())
```

```{r}
rec_prep_melanoma <- rec_melanoma |>
  prep(data_train)
beepr::beep()

feat_train_melanoma <- rec_prep_melanoma |>
  bake(NULL)
beepr::beep()

feat_test_melanoma <- rec_prep_melanoma |>
  bake(data_test)
beepr::beep()
```

```{r}
lm_drop_melanoma <- logistic_reg() |>
  set_engine("glm") |>
  fit(prolonged_covid_symptoms ~ ., data = feat_train_melanoma)
beepr::beep()
```

```{r}
accuracy_vec(truth = feat_test_melanoma$prolonged_covid_symptoms,
             estimate = predict(lm_drop_melanoma, feat_test_melanoma)$.pred_class)
```

```{r}
accuracy_table <- bind_rows(accuracy_table,
                       tibble(model = "drop_melanoma",
                              accuracy_val = accuracy_vec(
                                truth = feat_test_melanoma$prolonged_covid_symptoms,
                                estimate = predict(lm_drop_melanoma, feat_test_melanoma)$.pred_class)))
```

## Drop `copd`

```{r}
rec_copd <-
  recipe(data = data_train,
         prolonged_covid_symptoms ~ .) |>
  step_rm(copd) |>
  step_impute_mode(all_predictors()) |>
  step_dummy(all_nominal_predictors())
```

```{r}
rec_prep_copd <- rec_copd |>
  prep(data_train)
beepr::beep()

feat_train_copd <- rec_prep_copd |>
  bake(NULL)
beepr::beep()

feat_test_copd <- rec_prep_copd |>
  bake(data_test)
beepr::beep()
```

```{r}
lm_drop_copd <- logistic_reg() |>
  set_engine("glm") |>
  fit(prolonged_covid_symptoms ~ ., data = feat_train_copd)
beepr::beep()
```

```{r}
accuracy_vec(truth = feat_test_copd$prolonged_covid_symptoms,
             estimate = predict(lm_drop_copd, feat_test_copd)$.pred_class)
```

```{r}
accuracy_table <- bind_rows(accuracy_table,
                       tibble(model = "drop_copd",
                              accuracy_val = accuracy_vec(
                                truth = feat_test_copd$prolonged_covid_symptoms,
                                estimate = predict(lm_drop_copd, feat_test_copd)$.pred_class)))
```

## Drop `depression`

```{r}
rec_depression <-
  recipe(data = data_train,
         prolonged_covid_symptoms ~ .) |>
  step_rm(depression) |>
  step_impute_mode(all_predictors()) |>
  step_dummy(all_nominal_predictors())
```

```{r}
rec_prep_depression <- rec_depression |>
  prep(data_train)
beepr::beep()

feat_train_depression <- rec_prep_depression |>
  bake(NULL)
beepr::beep()

feat_test_depression <- rec_prep_depression |>
  bake(data_test)
beepr::beep()
```

```{r}
lm_drop_depression <- logistic_reg() |>
  set_engine("glm") |>
  fit(prolonged_covid_symptoms ~ ., data = feat_train_depression)
beepr::beep()
```

```{r}
accuracy_vec(truth = feat_test_depression$prolonged_covid_symptoms,
             estimate = predict(lm_drop_depression, feat_test_depression)$.pred_class)
```

```{r}
accuracy_table <- bind_rows(accuracy_table,
                       tibble(model = "drop_depression",
                              accuracy_val = accuracy_vec(
                                truth = feat_test_depression$prolonged_covid_symptoms,
                                estimate = predict(lm_drop_depression, feat_test_depression)$.pred_class)))
```

## Drop `kidney_disease`

```{r}
rec_kidney <-
  recipe(data = data_train,
         prolonged_covid_symptoms ~ .) |>
  step_rm(kidney_disease) |>
  step_impute_mode(all_predictors()) |>
  step_dummy(all_nominal_predictors())
```

```{r}
rec_prep_kidney <- rec_kidney |>
  prep(data_train)
beepr::beep()

feat_train_kidney <- rec_prep_kidney |>
  bake(NULL)
beepr::beep()

feat_test_kidney <- rec_prep_kidney |>
  bake(data_test)
beepr::beep()
```

```{r}
lm_drop_kidney <- logistic_reg() |>
  set_engine("glm") |>
  fit(prolonged_covid_symptoms ~ ., data = feat_train_kidney)
beepr::beep()
```

```{r}
accuracy_vec(truth = feat_test_kidney$prolonged_covid_symptoms,
             estimate = predict(lm_drop_kidney, feat_test_kidney)$.pred_class)
```

```{r}
accuracy_table <- bind_rows(accuracy_table,
                       tibble(model = "drop_kidney",
                              accuracy_val = accuracy_vec(
                                truth = feat_test_kidney$prolonged_covid_symptoms,
                                estimate = predict(lm_drop_kidney, feat_test_kidney)$.pred_class)))
```

## Drop `arthritis`

```{r}
rec_arthritis <-
  recipe(data = data_train,
         prolonged_covid_symptoms ~ .) |>
  step_rm(arthritis) |>
  step_impute_mode(all_predictors()) |>
  step_dummy(all_nominal_predictors())
```

```{r}
rec_prep_arthritis <- rec_arthritis |>
  prep(data_train)
beepr::beep()

feat_train_arthritis <- rec_prep_arthritis |>
  bake(NULL)
beepr::beep()

feat_test_arthritis <- rec_prep_arthritis |>
  bake(data_test)
beepr::beep()
```

```{r}
lm_drop_arthritis <- logistic_reg() |>
  set_engine("glm") |>
  fit(prolonged_covid_symptoms ~ ., data = feat_train_arthritis)
beepr::beep()
```

```{r}
accuracy_vec(truth = feat_test_arthritis$prolonged_covid_symptoms,
             estimate = predict(lm_drop_arthritis, feat_test_arthritis)$.pred_class)
```

```{r}
accuracy_table <- bind_rows(accuracy_table,
                       tibble(model = "drop_arthritis",
                              accuracy_val = accuracy_vec(
                                truth = feat_test_arthritis$prolonged_covid_symptoms,
                                estimate = predict(lm_drop_arthritis, feat_test_arthritis)$.pred_class)))
```

## Drop `veteran_status`

```{r}
rec_veteran <-
  recipe(data = data_train,
         prolonged_covid_symptoms ~ .) |>
  step_rm(veteran_status) |>
  step_impute_mode(all_predictors()) |>
  step_dummy(all_nominal_predictors())
```

```{r}
rec_prep_veteran <- rec_veteran |>
  prep(data_train)
beepr::beep()

feat_train_veteran <- rec_prep_veteran |>
  bake(NULL)
beepr::beep()

feat_test_veteran <- rec_prep_veteran |>
  bake(data_test)
beepr::beep()
```

```{r}
lm_drop_veteran <- logistic_reg() |>
  set_engine("glm") |>
  fit(prolonged_covid_symptoms ~ ., data = feat_train_veteran)
beepr::beep()
```

```{r}
accuracy_vec(truth = feat_test_veteran$prolonged_covid_symptoms,
             estimate = predict(lm_drop_veteran, feat_test_veteran)$.pred_class)
```

```{r}
accuracy_table <- bind_rows(accuracy_table,
                       tibble(model = "drop_veteran",
                              accuracy_val = accuracy_vec(
                                truth = feat_test_veteran$prolonged_covid_symptoms,
                                estimate = predict(lm_drop_veteran, feat_test_veteran)$.pred_class)))
```

## Drop `pregnant`

```{r}
rec_pregnant <-
  recipe(data = data_train,
         prolonged_covid_symptoms ~ .) |>
  step_rm(pregnant) |>
  step_impute_mode(all_predictors()) |>
  step_dummy(all_nominal_predictors())
```

```{r}
rec_prep_pregnant <- rec_pregnant |>
  prep(data_train)
beepr::beep()

feat_train_pregnant <- rec_prep_pregnant |>
  bake(NULL)
beepr::beep()

feat_test_pregnant <- rec_prep_pregnant |>
  bake(data_test)
beepr::beep()
```

```{r}
lm_drop_pregnant <- logistic_reg() |>
  set_engine("glm") |>
  fit(prolonged_covid_symptoms ~ ., data = feat_train_pregnant)
beepr::beep()
```

```{r}
accuracy_vec(truth = feat_test_pregnant$prolonged_covid_symptoms,
             estimate = predict(lm_drop_pregnant, feat_test_pregnant)$.pred_class)
```

```{r}
accuracy_table <- bind_rows(accuracy_table,
                       tibble(model = "drop_pregnant",
                              accuracy_val = accuracy_vec(
                                truth = feat_test_pregnant$prolonged_covid_symptoms,
                                estimate = predict(lm_drop_pregnant, feat_test_pregnant)$.pred_class)))
```

## Drop `deaf`

```{r}
rec_deaf <-
  recipe(data = data_train,
         prolonged_covid_symptoms ~ .) |>
  step_rm(deaf) |>
  step_impute_mode(all_predictors()) |>
  step_dummy(all_nominal_predictors())
```

```{r}
rec_prep_deaf <- rec_deaf |>
  prep(data_train)
beepr::beep()

feat_train_deaf <- rec_prep_deaf |>
  bake(NULL)
beepr::beep()

feat_test_deaf <- rec_prep_deaf |>
  bake(data_test)
beepr::beep()
```

```{r}
lm_drop_deaf <- logistic_reg() |>
  set_engine("glm") |>
  fit(prolonged_covid_symptoms ~ ., data = feat_train_deaf)
beepr::beep()
```

```{r}
accuracy_vec(truth = feat_test_deaf$prolonged_covid_symptoms,
             estimate = predict(lm_drop_deaf, feat_test_deaf)$.pred_class)
```

```{r}
accuracy_table <- bind_rows(accuracy_table,
                       tibble(model = "drop_deaf",
                              accuracy_val = accuracy_vec(
                                truth = feat_test_deaf$prolonged_covid_symptoms,
                                estimate = predict(lm_drop_deaf, feat_test_deaf)$.pred_class)))
```

## Drop `covid_vacc_status`

```{r}
rec_covid_vacc <-
  recipe(data = data_train,
         prolonged_covid_symptoms ~ .) |>
  step_rm(covid_vacc_status) |>
  step_impute_mode(all_predictors()) |>
  step_dummy(all_nominal_predictors())
```

```{r}
rec_prep_covid_vacc <- rec_covid_vacc |>
  prep(data_train)
beepr::beep()

feat_train_covid_vacc <- rec_prep_covid_vacc |>
  bake(NULL)
beepr::beep()

feat_test_covid_vacc <- rec_prep_covid_vacc |>
  bake(data_test)
beepr::beep()
```

```{r}
lm_drop_covid_vacc <- logistic_reg() |>
  set_engine("glm") |>
  fit(prolonged_covid_symptoms ~ ., data = feat_train_covid_vacc)
beepr::beep()
```

```{r}
accuracy_vec(truth = feat_test_covid_vacc$prolonged_covid_symptoms,
             estimate = predict(lm_drop_covid_vacc, feat_test_covid_vacc)$.pred_class)
```

```{r}
accuracy_table <- bind_rows(accuracy_table,
                       tibble(model = "drop_covid_vacc",
                              accuracy_val = accuracy_vec(
                                truth = feat_test_covid_vacc$prolonged_covid_symptoms,
                                estimate = predict(lm_drop_covid_vacc, feat_test_covid_vacc)$.pred_class)))
```

## Drop `diabetic`

```{r}
rec_diabetic <-
  recipe(data = data_train,
         prolonged_covid_symptoms ~ .) |>
  step_rm(diabetic) |>
  step_impute_mode(all_predictors()) |>
  step_dummy(all_nominal_predictors())
```

```{r}
rec_prep_diabetic <- rec_diabetic |>
  prep(data_train)
beepr::beep()

feat_train_diabetic <- rec_prep_diabetic |>
  bake(NULL)
beepr::beep()

feat_test_diabetic <- rec_prep_diabetic |>
  bake(data_test)
beepr::beep()
```

```{r}
lm_drop_diabetic <- logistic_reg() |>
  set_engine("glm") |>
  fit(prolonged_covid_symptoms ~ ., data = feat_train_diabetic)
beepr::beep()
```

```{r}
accuracy_vec(truth = feat_test_diabetic$prolonged_covid_symptoms,
             estimate = predict(lm_drop_diabetic, feat_test_diabetic)$.pred_class)
```

```{r}
accuracy_table <- bind_rows(accuracy_table,
                       tibble(model = "drop_diabetic",
                              accuracy_val = accuracy_vec(
                                truth = feat_test_diabetic$prolonged_covid_symptoms,
                                estimate = predict(lm_drop_diabetic, feat_test_diabetic)$.pred_class)))
```

## Drop `college_or_more`

```{r}
rec_college <-
  recipe(data = data_train,
         prolonged_covid_symptoms ~ .) |>
  step_rm(college_or_more) |>
  step_impute_mode(all_predictors()) |>
  step_dummy(all_nominal_predictors())
```

```{r}
rec_prep_college <- rec_college |>
  prep(data_train)
beepr::beep()

feat_train_college <- rec_prep_college |>
  bake(NULL)
beepr::beep()

feat_test_college <- rec_prep_college |>
  bake(data_test)
beepr::beep()
```

```{r}
lm_drop_college <- logistic_reg() |>
  set_engine("glm") |>
  fit(prolonged_covid_symptoms ~ ., data = feat_train_college)
beepr::beep()
```

```{r}
accuracy_vec(truth = feat_test_college$prolonged_covid_symptoms,
             estimate = predict(lm_drop_college, feat_test_college)$.pred_class)
```

```{r}
accuracy_table <- bind_rows(accuracy_table,
                       tibble(model = "drop_college",
                              accuracy_val = accuracy_vec(
                                truth = feat_test_college$prolonged_covid_symptoms,
                                estimate = predict(lm_drop_college, feat_test_college)$.pred_class)))
```

## Drop `income_over_50k`

```{r}
rec_income <-
  recipe(data = data_train,
         prolonged_covid_symptoms ~ .) |>
  step_rm(income_over_50k) |>
  step_impute_mode(all_predictors()) |>
  step_dummy(all_nominal_predictors())
```

```{r}
rec_prep_income <- rec_income |>
  prep(data_train)
beepr::beep()

feat_train_income <- rec_prep_income |>
  bake(NULL)
beepr::beep()

feat_test_income <- rec_prep_income |>
  bake(data_test)
beepr::beep()
```

```{r}
lm_drop_income <- logistic_reg() |>
  set_engine("glm") |>
  fit(prolonged_covid_symptoms ~ ., data = feat_train_income)
beepr::beep()
```

```{r}
accuracy_vec(truth = feat_test_income$prolonged_covid_symptoms,
             estimate = predict(lm_drop_income, feat_test_income)$.pred_class)
```

```{r}
accuracy_table <- bind_rows(accuracy_table,
                       tibble(model = "drop_income",
                              accuracy_val = accuracy_vec(
                                truth = feat_test_income$prolonged_covid_symptoms,
                                estimate = predict(lm_drop_income, feat_test_income)$.pred_class)))
```

## Drop `currently_employed`

```{r}
rec_employed <-
  recipe(data = data_train,
         prolonged_covid_symptoms ~ .) |>
  step_rm(currently_employed) |>
  step_impute_mode(all_predictors()) |>
  step_dummy(all_nominal_predictors())
```

```{r}
rec_prep_employed <- rec_employed |>
  prep(data_train)
beepr::beep()

feat_train_employed <- rec_prep_employed |>
  bake(NULL)
beepr::beep()

feat_test_employed <- rec_prep_employed |>
  bake(data_test)
beepr::beep()
```

```{r}
lm_drop_employed <- logistic_reg() |>
  set_engine("glm") |>
  fit(prolonged_covid_symptoms ~ ., data = feat_train_employed)
beepr::beep()
```

```{r}
accuracy_vec(truth = feat_test_employed$prolonged_covid_symptoms,
             estimate = predict(lm_drop_employed, feat_test_employed)$.pred_class)
```

```{r}
accuracy_table <- bind_rows(accuracy_table,
                       tibble(model = "drop_employed",
                              accuracy_val = accuracy_vec(
                                truth = feat_test_employed$prolonged_covid_symptoms,
                                estimate = predict(lm_drop_employed, feat_test_employed)$.pred_class)))
```

## Drop `is_married`

```{r}
rec_married <-
  recipe(data = data_train,
         prolonged_covid_symptoms ~ .) |>
  step_rm(is_married) |>
  step_impute_mode(all_predictors()) |>
  step_dummy(all_nominal_predictors())
```

```{r}
rec_prep_married <- rec_married |>
  prep(data_train)
beepr::beep()

feat_train_married <- rec_prep_married |>
  bake(NULL)
beepr::beep()

feat_test_married <- rec_prep_married |>
  bake(data_test)
beepr::beep()
```

```{r}
lm_drop_married <- logistic_reg() |>
  set_engine("glm") |>
  fit(prolonged_covid_symptoms ~ ., data = feat_train_married)
beepr::beep()
```

```{r}
accuracy_vec(truth = feat_test_married$prolonged_covid_symptoms,
             estimate = predict(lm_drop_married, feat_test_married)$.pred_class)
```

```{r}
accuracy_table <- bind_rows(accuracy_table,
                       tibble(model = "drop_married",
                              accuracy_val = accuracy_vec(
                                truth = feat_test_married$prolonged_covid_symptoms,
                                estimate = predict(lm_drop_married, feat_test_married)$.pred_class)))
```

## Drop `owns_home`

```{r}
rec_owns_home <-
  recipe(data = data_train,
         prolonged_covid_symptoms ~ .) |>
  step_rm(owns_home) |>
  step_impute_mode(all_predictors()) |>
  step_dummy(all_nominal_predictors())
```

```{r}
rec_prep_owns_home <- rec_owns_home |>
  prep(data_train)
beepr::beep()

feat_train_owns_home <- rec_prep_owns_home |>
  bake(NULL)
beepr::beep()

feat_test_owns_home <- rec_prep_owns_home |>
  bake(data_test)
beepr::beep()
```

```{r}
lm_drop_owns_home <- logistic_reg() |>
  set_engine("glm") |>
  fit(prolonged_covid_symptoms ~ ., data = feat_train_owns_home)
beepr::beep()
```

```{r}
accuracy_vec(truth = feat_test_owns_home$prolonged_covid_symptoms,
             estimate = predict(lm_drop_owns_home, feat_test_owns_home)$.pred_class)
```

```{r}
accuracy_table <- bind_rows(accuracy_table,
                       tibble(model = "drop_owns_home",
                              accuracy_val = accuracy_vec(
                                truth = feat_test_owns_home$prolonged_covid_symptoms,
                                estimate = predict(lm_drop_owns_home, feat_test_owns_home)$.pred_class)))
```

## Drop `had_limiting_covid_symptoms`

```{r}
rec_covid_symptoms <-
  recipe(data = data_train,
         prolonged_covid_symptoms ~ .) |>
  step_rm(had_limiting_covid_symptoms) |>
  step_impute_mode(all_predictors()) |>
  step_dummy(all_nominal_predictors())
```

```{r}
rec_prep_covid_symptoms <- rec_covid_symptoms |>
  prep(data_train)
beepr::beep()

feat_train_covid_symptoms <- rec_prep_covid_symptoms |>
  bake(NULL)
beepr::beep()

feat_test_covid_symptoms <- rec_prep_covid_symptoms |>
  bake(data_test)
beepr::beep()
```

```{r}
lm_drop_covid_symptoms <- logistic_reg() |>
  set_engine("glm") |>
  fit(prolonged_covid_symptoms ~ ., data = feat_train_covid_symptoms)
beepr::beep()
```

```{r}
accuracy_vec(truth = feat_test_covid_symptoms$prolonged_covid_symptoms,
             estimate = predict(lm_drop_covid_symptoms, feat_test_covid_symptoms)$.pred_class)
```

```{r}
accuracy_table <- bind_rows(accuracy_table,
                       tibble(model = "drop_covid_symptoms",
                              accuracy_val = accuracy_vec(
                                truth = feat_test_covid_symptoms$prolonged_covid_symptoms,
                                estimate = predict(lm_drop_covid_symptoms, feat_test_covid_symptoms)$.pred_class)))
```

## Drop `two_or_more_vaccs` (TODO)

```{r}
rec_vaccs <-
  recipe(data = data_train,
         prolonged_covid_symptoms ~ .) |>
  step_rm(two_or_more_vaccs) |>
  step_impute_mode(all_predictors()) |>
  step_dummy(all_nominal_predictors())
```

```{r}
rec_prep_vaccs <- rec_vaccs |>
  prep(data_train)
beepr::beep()

feat_train_vaccs <- rec_prep_vaccs |>
  bake(NULL)
beepr::beep()

feat_test_vaccs <- rec_prep_vaccs |>
  bake(data_test)
beepr::beep()
```

```{r}
lm_drop_vaccs <- logistic_reg() |>
  set_engine("glm") |>
  fit(prolonged_covid_symptoms ~ ., data = feat_train_vaccs)
beepr::beep()
```

```{r}
accuracy_vec(truth = feat_test_vaccs$prolonged_covid_symptoms,
             estimate = predict(lm_drop_vaccs, feat_test_vaccs)$.pred_class)
```

```{r}
accuracy_table <- bind_rows(accuracy_table,
                       tibble(model = "drop_vaccs",
                              accuracy_val = accuracy_vec(
                                truth = feat_test_vaccs$prolonged_covid_symptoms,
                                estimate = predict(lm_drop_vaccs, feat_test_vaccs)$.pred_class)))
```

# Compare outcomes

```{r}
mode_accuracy <- accuracy_table$accuracy_val[2]

accuracy_table_abr <- data.frame(accuracy_table) |>
  filter(!(model %in% c("full_no_impute", "full_impute_bag", "full_impute_knn"))) |>
  mutate(accuracy_val = mode_accuracy - accuracy_val)
# coding such that higher (more positive) signifies the variable is more positively contributing to model accuracy

graph_accuracy <- ggplot(data = accuracy_table_abr) +
  geom_col(mapping = aes(x = accuracy_val, y = fct_reorder(model, accuracy_val))) +
  xlab("contribution to accuracy") +
  ylab("variable name")

graph_accuracy
```

The accuracy of the full model using mode imputation was approximately 0.797. Based on this graph, the analysis suggests that none of the variables individually contributed substantially to the accuracy. The variable which contributed the most to accuracy was `had_limiting_covid_symptoms`, where a model excluding `had_limiting_covid_symptoms` had about 0.012 lower accuracy than the full model. Interesting, even `covid_vacc_status` and `two_or_more_vaccs` did not seem to substantially impact model accuracy.